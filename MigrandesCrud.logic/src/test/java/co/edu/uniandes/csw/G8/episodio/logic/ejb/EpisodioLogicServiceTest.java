/* ========================================================================
 * Copyright 2014 G8
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G8

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G8.episodio.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G8.episodio.logic.dto.EpisodioPageDTO;
import co.edu.uniandes.csw.G8.episodio.logic.dto.EpisodioDTO;
import co.edu.uniandes.csw.G8.episodio.logic.api.IEpisodioLogicService;
import co.edu.uniandes.csw.G8.episodio.persistence.EpisodioPersistence;
import co.edu.uniandes.csw.G8.episodio.persistence.api.IEpisodioPersistence;
import co.edu.uniandes.csw.G8.episodio.persistence.entity.EpisodioEntity;
import co.edu.uniandes.csw.G8.episodio.persistence.converter.EpisodioConverter;
import static co.edu.uniandes.csw.G8.util._TestUtil.*;

@RunWith(Arquillian.class)
public class EpisodioLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(EpisodioLogicService.class.getPackage())
				.addPackage(IEpisodioLogicService.class.getPackage())
				.addPackage(EpisodioPersistence.class.getPackage())
				.addPackage(EpisodioEntity.class.getPackage())
				.addPackage(IEpisodioPersistence.class.getPackage())
                .addPackage(EpisodioDTO.class.getPackage())
                .addPackage(EpisodioConverter.class.getPackage())
                .addPackage(EpisodioEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IEpisodioLogicService episodioLogicService;
	
	@Inject
	private IEpisodioPersistence episodioPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<EpisodioDTO> dtos=episodioPersistence.getEpisodios();
		for(EpisodioDTO dto:dtos){
			episodioPersistence.deleteEpisodio(dto.getId());
		}
	}

	private List<EpisodioDTO> data=new ArrayList<EpisodioDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			EpisodioDTO pdto=new EpisodioDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setFecha(generateRandomDate());
			pdto.setActividadId(generateRandom(Long.class));
			pdto=episodioPersistence.createEpisodio(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createEpisodioTest(){
		EpisodioDTO ldto=new EpisodioDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setFecha(generateRandomDate());
		ldto.setActividadId(generateRandom(Long.class));
		
		
		EpisodioDTO result=episodioLogicService.createEpisodio(ldto);
		
		Assert.assertNotNull(result);
		
		EpisodioDTO pdto=episodioPersistence.getEpisodio(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getFecha(), pdto.getFecha());	
		Assert.assertEquals(ldto.getActividadId(), pdto.getActividadId());	
	}
	
	@Test
	public void getEpisodiosTest(){
		List<EpisodioDTO> list=episodioLogicService.getEpisodios();
		Assert.assertEquals(list.size(), data.size());
        for(EpisodioDTO ldto:list){
        	boolean found=false;
            for(EpisodioDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getEpisodioTest(){
		EpisodioDTO pdto=data.get(0);
		EpisodioDTO ldto=episodioLogicService.getEpisodio(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getFecha(), ldto.getFecha());
		Assert.assertEquals(pdto.getActividadId(), ldto.getActividadId());
        
	}
	
	@Test
	public void deleteEpisodioTest(){
		EpisodioDTO pdto=data.get(0);
		episodioLogicService.deleteEpisodio(pdto.getId());
        EpisodioDTO deleted=episodioPersistence.getEpisodio(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateEpisodioTest(){
		EpisodioDTO pdto=data.get(0);
		
		EpisodioDTO ldto=new EpisodioDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setFecha(generateRandomDate());
		ldto.setActividadId(generateRandom(Long.class));
		
		
		episodioLogicService.updateEpisodio(ldto);
		
		
		EpisodioDTO resp=episodioPersistence.getEpisodio(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getFecha(), resp.getFecha());	
		Assert.assertEquals(ldto.getActividadId(), resp.getActividadId());	
	}
	
	@Test
	public void getEpisodioPaginationTest(){
		
		EpisodioPageDTO dto1=episodioLogicService.getEpisodios(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		EpisodioPageDTO dto2=episodioLogicService.getEpisodios(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(EpisodioDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(EpisodioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(EpisodioDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(EpisodioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        EpisodioPageDTO dto3=episodioLogicService.getEpisodios(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(EpisodioDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(EpisodioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}
/* ========================================================================
 * Copyright 2014 G8
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G8

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G8.notadevoz.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G8.notadevoz.logic.dto.NotaDeVozPageDTO;
import co.edu.uniandes.csw.G8.notadevoz.logic.dto.NotaDeVozDTO;
import co.edu.uniandes.csw.G8.notadevoz.logic.api.INotaDeVozLogicService;
import co.edu.uniandes.csw.G8.notadevoz.persistence.NotaDeVozPersistence;
import co.edu.uniandes.csw.G8.notadevoz.persistence.api.INotaDeVozPersistence;
import co.edu.uniandes.csw.G8.notadevoz.persistence.entity.NotaDeVozEntity;
import co.edu.uniandes.csw.G8.notadevoz.persistence.converter.NotaDeVozConverter;
import static co.edu.uniandes.csw.G8.util._TestUtil.*;

@RunWith(Arquillian.class)
public class NotaDeVozLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(NotaDeVozLogicService.class.getPackage())
				.addPackage(INotaDeVozLogicService.class.getPackage())
				.addPackage(NotaDeVozPersistence.class.getPackage())
				.addPackage(NotaDeVozEntity.class.getPackage())
				.addPackage(INotaDeVozPersistence.class.getPackage())
                .addPackage(NotaDeVozDTO.class.getPackage())
                .addPackage(NotaDeVozConverter.class.getPackage())
                .addPackage(NotaDeVozEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private INotaDeVozLogicService notaDeVozLogicService;
	
	@Inject
	private INotaDeVozPersistence notaDeVozPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<NotaDeVozDTO> dtos=notaDeVozPersistence.getNotaDeVozs();
		for(NotaDeVozDTO dto:dtos){
			notaDeVozPersistence.deleteNotaDeVoz(dto.getId());
		}
	}

	private List<NotaDeVozDTO> data=new ArrayList<NotaDeVozDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			NotaDeVozDTO pdto=new NotaDeVozDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setDescripcion(generateRandom(String.class));
			pdto.setArchivo(generateRandom(String.class));
			pdto=notaDeVozPersistence.createNotaDeVoz(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createNotaDeVozTest(){
		NotaDeVozDTO ldto=new NotaDeVozDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setArchivo(generateRandom(String.class));
		
		
		NotaDeVozDTO result=notaDeVozLogicService.createNotaDeVoz(ldto);
		
		Assert.assertNotNull(result);
		
		NotaDeVozDTO pdto=notaDeVozPersistence.getNotaDeVoz(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getDescripcion(), pdto.getDescripcion());	
		Assert.assertEquals(ldto.getArchivo(), pdto.getArchivo());	
	}
	
	@Test
	public void getNotaDeVozsTest(){
		List<NotaDeVozDTO> list=notaDeVozLogicService.getNotaDeVozs();
		Assert.assertEquals(list.size(), data.size());
        for(NotaDeVozDTO ldto:list){
        	boolean found=false;
            for(NotaDeVozDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getNotaDeVozTest(){
		NotaDeVozDTO pdto=data.get(0);
		NotaDeVozDTO ldto=notaDeVozLogicService.getNotaDeVoz(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getDescripcion(), ldto.getDescripcion());
		Assert.assertEquals(pdto.getArchivo(), ldto.getArchivo());
        
	}
	
	@Test
	public void deleteNotaDeVozTest(){
		NotaDeVozDTO pdto=data.get(0);
		notaDeVozLogicService.deleteNotaDeVoz(pdto.getId());
        NotaDeVozDTO deleted=notaDeVozPersistence.getNotaDeVoz(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateNotaDeVozTest(){
		NotaDeVozDTO pdto=data.get(0);
		
		NotaDeVozDTO ldto=new NotaDeVozDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setDescripcion(generateRandom(String.class));
		ldto.setArchivo(generateRandom(String.class));
		
		
		notaDeVozLogicService.updateNotaDeVoz(ldto);
		
		
		NotaDeVozDTO resp=notaDeVozPersistence.getNotaDeVoz(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getDescripcion(), resp.getDescripcion());	
		Assert.assertEquals(ldto.getArchivo(), resp.getArchivo());	
	}
	
	@Test
	public void getNotaDeVozPaginationTest(){
		
		NotaDeVozPageDTO dto1=notaDeVozLogicService.getNotaDeVozs(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		NotaDeVozPageDTO dto2=notaDeVozLogicService.getNotaDeVozs(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(NotaDeVozDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(NotaDeVozDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(NotaDeVozDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(NotaDeVozDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        NotaDeVozPageDTO dto3=notaDeVozLogicService.getNotaDeVozs(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(NotaDeVozDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(NotaDeVozDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}
/* ========================================================================
 * Copyright 2014 G8
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G8

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G8.tipo_medicamento.persistence;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.G8.tipo_medicamento.logic.dto.Tipo_MedicamentoPageDTO;
import co.edu.uniandes.csw.G8.tipo_medicamento.logic.dto.Tipo_MedicamentoDTO;
import co.edu.uniandes.csw.G8.tipo_medicamento.persistence.api.ITipo_MedicamentoPersistence;
import co.edu.uniandes.csw.G8.tipo_medicamento.persistence.entity.Tipo_MedicamentoEntity;
import co.edu.uniandes.csw.G8.tipo_medicamento.persistence.converter.Tipo_MedicamentoConverter;
import static co.edu.uniandes.csw.G8.util._TestUtil.*;

@RunWith(Arquillian.class)
public class Tipo_MedicamentoPersistenceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(Tipo_MedicamentoPersistence.class.getPackage())
				.addPackage(Tipo_MedicamentoEntity.class.getPackage())
				.addPackage(ITipo_MedicamentoPersistence.class.getPackage())
                .addPackage(Tipo_MedicamentoDTO.class.getPackage())
                .addPackage(Tipo_MedicamentoConverter.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ITipo_MedicamentoPersistence tipo_MedicamentoPersistence;

	@PersistenceContext
	private EntityManager em;

	@Inject
	UserTransaction utx;

	@Before
	public void configTest() {
		System.out.println("em: " + em);
		try {
			utx.begin();
			clearData();
			insertData();
			utx.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				utx.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
	}

	private void clearData() {
		em.createQuery("delete from Tipo_MedicamentoEntity").executeUpdate();
	}

	private List<Tipo_MedicamentoEntity> data=new ArrayList<Tipo_MedicamentoEntity>();

	private void insertData() {
		for(int i=0;i<3;i++){
			Tipo_MedicamentoEntity entity=new Tipo_MedicamentoEntity();
			entity.setName(generateRandom(String.class));
			entity.setValor(generateRandom(Integer.class));
			em.persist(entity);
			data.add(entity);
		}
	}
	
	@Test
	public void createTipo_MedicamentoTest(){
		Tipo_MedicamentoDTO dto=new Tipo_MedicamentoDTO();
		dto.setName(generateRandom(String.class));
		dto.setValor(generateRandom(Integer.class));
		
		Tipo_MedicamentoDTO result=tipo_MedicamentoPersistence.createTipo_Medicamento(dto);
		
		Assert.assertNotNull(result);
		
		Tipo_MedicamentoEntity entity=em.find(Tipo_MedicamentoEntity.class, result.getId());
		
		Assert.assertEquals(dto.getName(), entity.getName());
		Assert.assertEquals(dto.getValor(), entity.getValor());
	}
	
	@Test
	public void getTipo_MedicamentosTest(){
		List<Tipo_MedicamentoDTO> list=tipo_MedicamentoPersistence.getTipo_Medicamentos();
		Assert.assertEquals(list.size(), data.size());
        for(Tipo_MedicamentoDTO dto:list){
        	boolean found=false;
            for(Tipo_MedicamentoEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getTipo_MedicamentoTest(){
		Tipo_MedicamentoEntity entity=data.get(0);
		Tipo_MedicamentoDTO dto=tipo_MedicamentoPersistence.getTipo_Medicamento(entity.getId());
        Assert.assertNotNull(dto);
		Assert.assertEquals(entity.getName(), dto.getName());
		Assert.assertEquals(entity.getValor(), dto.getValor());
        
	}
	
	@Test
	public void deleteTipo_MedicamentoTest(){
		Tipo_MedicamentoEntity entity=data.get(0);
		tipo_MedicamentoPersistence.deleteTipo_Medicamento(entity.getId());
        Tipo_MedicamentoEntity deleted=em.find(Tipo_MedicamentoEntity.class, entity.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateTipo_MedicamentoTest(){
		Tipo_MedicamentoEntity entity=data.get(0);
		
		Tipo_MedicamentoDTO dto=new Tipo_MedicamentoDTO();
		dto.setId(entity.getId());
		dto.setName(generateRandom(String.class));
		dto.setValor(generateRandom(Integer.class));
		
		
		tipo_MedicamentoPersistence.updateTipo_Medicamento(dto);
		
		
		Tipo_MedicamentoEntity resp=em.find(Tipo_MedicamentoEntity.class, entity.getId());
		
		Assert.assertEquals(dto.getName(), resp.getName());	
		Assert.assertEquals(dto.getValor(), resp.getValor());	
	}
	
	@Test
	public void getTipo_MedicamentoPaginationTest(){
		//Page 1
		Tipo_MedicamentoPageDTO dto1=tipo_MedicamentoPersistence.getTipo_Medicamentos(1,2);
        Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
        //Page 2
        Tipo_MedicamentoPageDTO dto2=tipo_MedicamentoPersistence.getTipo_Medicamentos(2,2);
        Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
        
        for(Tipo_MedicamentoDTO dto:dto1.getRecords()){
        	boolean found=false;	
            for(Tipo_MedicamentoEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(Tipo_MedicamentoDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(Tipo_MedicamentoEntity entity:data){
            	if(dto.getId().equals(entity.getId())){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
}
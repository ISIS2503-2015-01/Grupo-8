/* ========================================================================
 * Copyright 2014 G8
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 G8

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.G8.paciente.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.G8.paciente.logic.dto.PacienteDTO;
import co.edu.uniandes.csw.G8.paciente.logic.api.IPacienteLogicService;
import co.edu.uniandes.csw.G8.paciente.master.logic.api._IPacienteMasterLogicService;
import co.edu.uniandes.csw.G8.paciente.master.logic.dto.PacienteMasterDTO;
import co.edu.uniandes.csw.G8.actividad.logic.api.IActividadLogicService;
import co.edu.uniandes.csw.G8.episodio.logic.api.IEpisodioLogicService;
import co.edu.uniandes.csw.G8.actividad.logic.dto.ActividadDTO;
import co.edu.uniandes.csw.G8.episodio.logic.dto.EpisodioDTO;
import javax.inject.Inject;


public abstract class _PacienteMasterMockLogicService implements _IPacienteMasterLogicService {

    protected static ArrayList<PacienteMasterDTO> pacienteMasterDtosList = new ArrayList<PacienteMasterDTO>() ;
    @Inject
    protected IActividadLogicService actividadPersistance;
    @Inject
    protected IEpisodioLogicService episodioPersistance;
    @Inject
    protected IPacienteLogicService pacientePersistance;

    public PacienteMasterDTO createMasterPaciente(PacienteMasterDTO paciente) {

        pacientePersistance.createPaciente(paciente.getPacienteEntity());
        for (ActividadDTO dto : paciente.getCreateactividad()) {
            paciente.getListactividad().add(actividadPersistance.createActividad(dto));
        }
        for (EpisodioDTO dto : paciente.getCreateepisodio()) {
            paciente.getListepisodio().add(episodioPersistance.createEpisodio(dto));
        }
        pacienteMasterDtosList.add(paciente);
        return paciente;
    }

    public PacienteMasterDTO getMasterPaciente(Long id) {
        for (PacienteMasterDTO pacienteMasterDTO : pacienteMasterDtosList) {
            if (pacienteMasterDTO.getPacienteEntity().getId() == id) {
                return pacienteMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterPaciente(Long id) {
        for (PacienteMasterDTO pacienteMasterDTO : pacienteMasterDtosList) {
            if (pacienteMasterDTO.getPacienteEntity().getId() == id) {

                for (ActividadDTO dto : pacienteMasterDTO.getCreateactividad()) {
                    actividadPersistance.deleteActividad(dto.getId());
                }
                pacientePersistance.deletePaciente(pacienteMasterDTO.getId());
                pacienteMasterDtosList.remove(pacienteMasterDTO);
                for (EpisodioDTO dto : pacienteMasterDTO.getCreateepisodio()) {
                    episodioPersistance.deleteEpisodio(dto.getId());
                }
                pacientePersistance.deletePaciente(pacienteMasterDTO.getId());
                pacienteMasterDtosList.remove(pacienteMasterDTO);
            }
        }

    }

    public void updateMasterPaciente(PacienteMasterDTO paciente) {

		PacienteMasterDTO currentPaciente = getMasterPaciente(paciente.getPacienteEntity().getId());
		if (currentPaciente == null) {
			currentPaciente = paciente;
		}else{
			pacienteMasterDtosList.remove(currentPaciente);
		}

        // update Actividad
        if (paciente.getUpdateactividad() != null) {
            for (ActividadDTO dto : paciente.getUpdateactividad()) {
                actividadPersistance.updateActividad(dto);
                for (ActividadDTO actividaddto : currentPaciente.getListactividad()) {
					if (actividaddto.getId() == dto.getId()) {
						currentPaciente.getListactividad().remove(actividaddto);
						currentPaciente.getListactividad().add(dto);
					}
				}
            }
        }
        // persist new Actividad
        if (paciente.getCreateactividad() != null) {
            for (ActividadDTO dto : paciente.getCreateactividad()) {
                ActividadDTO persistedActividadDTO = actividadPersistance.createActividad(dto);
                dto = persistedActividadDTO;
                currentPaciente.getListactividad().add(dto);
            }
        }
        // delete Actividad
        if (paciente.getDeleteactividad() != null) {
            for (ActividadDTO dto : paciente.getDeleteactividad()) {
				for (ActividadDTO actividaddto : currentPaciente.getListactividad()) {
					if (actividaddto.getId() == dto.getId()) {
						currentPaciente.getListactividad().remove(actividaddto);
					}
				}
                actividadPersistance.deleteActividad(dto.getId());
            }
        }
        // update Episodio
        if (paciente.getUpdateepisodio() != null) {
            for (EpisodioDTO dto : paciente.getUpdateepisodio()) {
                episodioPersistance.updateEpisodio(dto);
                for (EpisodioDTO episodiodto : currentPaciente.getListepisodio()) {
					if (episodiodto.getId() == dto.getId()) {
						currentPaciente.getListepisodio().remove(episodiodto);
						currentPaciente.getListepisodio().add(dto);
					}
				}
            }
        }
        // persist new Episodio
        if (paciente.getCreateepisodio() != null) {
            for (EpisodioDTO dto : paciente.getCreateepisodio()) {
                EpisodioDTO persistedEpisodioDTO = episodioPersistance.createEpisodio(dto);
                dto = persistedEpisodioDTO;
                currentPaciente.getListepisodio().add(dto);
            }
        }
        // delete Episodio
        if (paciente.getDeleteepisodio() != null) {
            for (EpisodioDTO dto : paciente.getDeleteepisodio()) {
				for (EpisodioDTO episodiodto : currentPaciente.getListepisodio()) {
					if (episodiodto.getId() == dto.getId()) {
						currentPaciente.getListepisodio().remove(episodiodto);
					}
				}
                episodioPersistance.deleteEpisodio(dto.getId());
            }
        }
        pacienteMasterDtosList.add(currentPaciente);
    }
}